#!/usr/bin/env bash
set -euo pipefail

# Directories
mkdir -p "$HOME/.local/bin"
mkdir -p "$HOME/.local/source"
mkdir -p "$HOME/.local/share/fonts"

clone_sparse () {
	local url="$1" dir="$2" branch="$3"; shift 3
	local target_dir="$HOME/.local/source/$dir"
	
	# Check if directory exists and is a git repository
	if [[ -d "$target_dir/.git" ]]; then
		echo "Repository $dir already exists, updating..."
		git -C "$target_dir" fetch origin
		git -C "$target_dir" sparse-checkout set "$@"
		git -C "$target_dir" checkout "$branch"
		git -C "$target_dir" pull origin "$branch" || true
	else
		# Remove directory if it exists but is not a git repo
		[[ -d "$target_dir" ]] && rm -rf "$target_dir"
		
		git clone --filter=blob:none --no-checkout "$url" "$target_dir"
		git -C "$target_dir" sparse-checkout init --no-cone
		git -C "$target_dir" sparse-checkout set "$@"
		git -C "$target_dir" checkout "$branch"
	fi
}

link_fonts () {
	local src_dir="$HOME/.local/source/$1"
	local pattern_rel="$2"
	local dest_dir="$HOME/.local/share/fonts"
	
	mkdir -p "$dest_dir"
	
	find "$src_dir" -type f -path "$src_dir/$pattern_rel" -exec ln -sf {} "$dest_dir" \;
}

install_nf_asset () {
	local asset="$1" tag="${2:-latest}"
	local dest_dir="$HOME/.local/share/fonts"
	local base="https://github.com/ryanoasis/nerd-fonts/releases"
	local url
	
	if [[ "$tag" == "latest" ]]; then
		url="$base/latest/download/$asset"
	else
		url="$base/download/$tag/$asset"
	fi
	
	mkdir -p "$dest_dir"
	local tmpdir; tmpdir="$(mktemp -d)"
	
	# Create unz directory
	mkdir -p "$tmpdir/unz"
	
	echo "Downloading $url"
	if ! curl -fL "$url" -o "$tmpdir/$asset"; then
		echo "Failed to download $asset"
		rm -rf "$tmpdir"
		return 1
	fi
	
	# Extract archive
	bsdtar -xf "$tmpdir/$asset" -C "$tmpdir/unz"
	
	# Remove existing fonts from this asset
	local font_base="${asset%.zip}"
	find "$dest_dir" -type l -name "*${font_base}*" -delete 2>/dev/null || true
	find "$dest_dir" -type f -name "*${font_base}*" -delete 2>/dev/null || true
	
	# Copy new fonts (not symlink, since tmpdir will be deleted)
	find "$tmpdir/unz" -type f -regextype posix-extended -iregex \
		'.*[ -](Regular|Bold)\.(ttf|otf)$' \
		-exec cp -f {} "$dest_dir" \;
	
	rm -rf "$tmpdir"
}

# Clone/update repositories with sparse checkout
clone_sparse https://github.com/notofonts/notofonts.github.io.git noto main \
	"fonts/*/full/ttf/*-Regular.ttf" \
	"fonts/*/full/ttf/*-Bold.ttf"
link_fonts "noto" "fonts/*/full/ttf/*-Regular.ttf"
link_fonts "noto" "fonts/*/full/ttf/*-Bold.ttf"

clone_sparse https://github.com/notofonts/noto-cjk.git noto-cjk main \
	"Serif/OTF/Korean/*-Regular.otf" \
	"Serif/OTF/Korean/*-Bold.otf" \
	"Sans/OTF/Korean/*-Regular.otf" \
	"Sans/OTF/Korean/*-Bold.otf"
link_fonts "noto-cjk" "Serif/OTF/Korean/*-Regular.otf"
link_fonts "noto-cjk" "Serif/OTF/Korean/*-Bold.otf"
link_fonts "noto-cjk" "Sans/OTF/Korean/*-Regular.otf"
link_fonts "noto-cjk" "Sans/OTF/Korean/*-Bold.otf"

clone_sparse https://github.com/orioncactus/pretendard.git pretendard main \
	"packages/pretendard-gov/dist/public/static/*-Regular.otf" \
	"packages/pretendard-gov/dist/public/static/*-Bold.otf"
link_fonts "pretendard" "packages/pretendard-gov/dist/public/static/*-Regular.otf"
link_fonts "pretendard" "packages/pretendard-gov/dist/public/static/*-Bold.otf"

clone_sparse https://github.com/githubnext/monaspace.git monaspace main \
	"fonts/Static Fonts/*/*-Regular.otf" \
	"fonts/Static Fonts/*/*-Bold.otf"
link_fonts "monaspace" "fonts/Static Fonts/*/*-Regular.otf"
link_fonts "monaspace" "fonts/Static Fonts/*/*-Bold.otf"

clone_sparse https://github.com/yangheeryu/Gowun-Batang.git gowunbatang master \
	"fonts/ttf/*.ttf"
link_fonts "gowunbatang" "fonts/ttf/*.ttf"

clone_sparse https://github.com/stipub/stixfonts.git stix master \
	"fonts/static_otf/*-Bold.otf" \
	"fonts/static_otf/*-Regular.otf"
link_fonts "stix" "fonts/static_otf/*-Regular.otf"
link_fonts "stix" "fonts/static_otf/*-Bold.otf"

# Install Nerd Fonts
install_nf_asset IosevkaTerm.zip
install_nf_asset IosevkaTermSlab.zip

# Update font cache if available
if command -v fc-cache >/dev/null 2>&1; then
	echo "Updating font cache..."
	fc-cache -fv || true
fi

echo "Font installation/update completed!"
